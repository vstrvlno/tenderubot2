# bot.py
import os
import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiohttp import web

import tender_parser  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–≤–æ–π parser.py

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", 10000))
POLL_INTERVAL_SECONDS = int(os.getenv("POLL_INTERVAL_SECONDS", 60 * 5))  # 5 –º–∏–Ω—É—Ç

if not TOKEN:
    raise RuntimeError("BOT_TOKEN not set in .env")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- –ü—Ä–æ—Å—Ç–æ–π state –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ---
AWAITING_KEYWORD = {}  # user_id -> action: "add" –∏–ª–∏ "remove"

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø TenderuBot ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–Ω–¥–µ—Ä—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã: /help"
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
        "/about - –æ –±–æ—Ç–µ\n"
        "/addkeyword - –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "/removekeyword - —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "/listkeywords - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
        "/parse - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä"
    )

@dp.message(Command("about"))
async def cmd_about(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç?", callback_data="about_info")],
        [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="about_stats")]
    ])
    await message.answer("–û –±–æ—Ç–µ:", reply_markup=kb)

@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    data = callback.data or ""
    try:
        if data == "about_info":
            await callback.message.answer("–Ø –Ω–∞—Ö–æ–∂—É —Ç–µ–Ω–¥–µ—Ä—ã –∏ —Ä–∞—Å—Å—ã–ª–∞—é –∏—Ö –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.")
        elif data == "about_stats":
            conn = tender_parser.get_conn()
            cur = conn.cursor()
            cur.execute("SELECT COUNT(*) FROM tenders")
            total = cur.fetchone()[0]
            cur.execute("SELECT COUNT(DISTINCT user_id) FROM subscriptions")
            users_row = cur.fetchone()
            users = users_row[0] if users_row else 0
            conn.close()
            await callback.message.answer(f"–¢–µ–Ω–¥–µ—Ä–æ–≤ –≤ –±–∞–∑–µ: {total}\n–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {users}")
        else:
            await callback.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞.")
        await callback.answer()
    except Exception:
        logging.exception("Error handling callback")

@dp.message(Command("addkeyword"))
async def cmd_addkeyword(message: types.Message):
    user_id = message.from_user.id
    AWAITING_KEYWORD[user_id] = "add"
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (–æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É) ‚Äî —è –ø–æ–¥–ø–∏—à—É –≤–∞—Å –Ω–∞ –Ω–µ–≥–æ.")

@dp.message(Command("removekeyword"))
async def cmd_removekeyword(message: types.Message):
    user_id = message.from_user.id
    AWAITING_KEYWORD[user_id] = "remove"
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫.")

@dp.message(Command("listkeywords"))
async def cmd_listkeywords(message: types.Message):
    user_id = message.from_user.id
    rows = tender_parser.list_user_keywords(user_id)
    if not rows:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
    else:
        await message.answer("–í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n" + "\n".join(f"- {r}" for r in rows))

@dp.message(Command("parse"))
async def cmd_parse(message: types.Message):
    await message.answer("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –Ω–æ–≤—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã...")
    new = await run_parser_once_and_notify()
    await message.answer(f"–ì–æ—Ç–æ–≤–æ. –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new)} –Ω–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤.")

# --- Echo –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message()
async def echo_handler(message: types.Message):
    text = (message.text or "").strip()
    user_id = message.from_user.id

    if user_id in AWAITING_KEYWORD:
        action = AWAITING_KEYWORD.pop(user_id)
        keyword = text.strip()
        if not keyword:
            await message.answer("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø—É—Å—Ç–æ–µ. –û—Ç–º–µ–Ω–∞.")
            return

        if action == "add":
            tender_parser.add_subscription(user_id, keyword)
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ '{keyword}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        elif action == "remove":
            tender_parser.remove_subscription(user_id, keyword)
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ '{keyword}' —É–¥–∞–ª–µ–Ω–∞ (–µ—Å–ª–∏ –±—ã–ª–∞).")
        return

    await message.answer("–Ø –ø—Ä–∏–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—ã. –ù–∞–±–µ—Ä–∏ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")

# --- –ü–∞—Ä—Å–µ—Ä + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ---
async def run_parser_once_and_notify():
    loop = asyncio.get_event_loop()
    tenders = await loop.run_in_executor(None, tender_parser.fetch_tenders, 50)
    added = await loop.run_in_executor(None, tender_parser.save_new_tenders, tenders)

    if not added:
        logging.info("No new tenders to process.")
        return []

    subs = await loop.run_in_executor(None, tender_parser.get_subscriptions)
    notifications = {}
    for t in added:
        name = (t.get("name") or "").lower()
        summary = (
            f"üìå {t.get('name')}\n–ù–æ–º–µ—Ä: {t.get('purchase_number')}\n"
            f"–ó–∞–∫–∞–∑—á–∏–∫: {t.get('customer')}\n–°—É–º–º–∞: {t.get('amount')}\n–î–∞—Ç–∞: {t.get('publish_date')}"
        )
        for kw, users in subs.items():
            if kw and kw.lower() in name:
                for u in users:
                    notifications.setdefault(u, []).append(summary)

    for user_id, msgs in notifications.items():
        try:
            for m in msgs[:10]:
                await bot.send_message(chat_id=user_id, text=m)
            if len(msgs) > 10:
                await bot.send_message(chat_id=user_id, text=f"...–∏ –µ—â—ë {len(msgs)-10} —Ç–µ–Ω–¥–µ—Ä–æ–≤.")
        except Exception:
            logging.exception(f"Failed to notify user {user_id}")

    logging.info(f"Notifications sent to {len(notifications)} users.")
    return added

# --- –§–æ–Ω–æ–≤—ã–π polling ---
async def polling_task():
    await asyncio.sleep(5)
    while True:
        try:
            logging.info("Periodic parser run started")
            await run_parser_once_and_notify()
            logging.info("Periodic parser run finished")
        except Exception:
            logging.exception("Error in periodic parser run")
        await asyncio.sleep(POLL_INTERVAL_SECONDS)

# --- HTTP —Å–µ—Ä–≤–µ—Ä (–¥–ª—è Render) ---
async def handle_root(request):
    return web.Response(text="TenderuBot is running")

async def start_webserver():
    app = web.Application()
    app.add_routes([web.get("/", handle_root)])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logging.info(f"Web server started on port {PORT}")

# --- Main ---
async def main():
    tender_parser.create_tables()

    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ polling
    web_task = asyncio.create_task(start_webserver())
    polling_bg_task = asyncio.create_task(polling_task())

    try:
        await dp.start_polling(bot)
    finally:
        polling_bg_task.cancel()
        web_task.cancel()
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Shutting down...")


