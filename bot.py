# bot.py
import os
import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

import parser as tender_parser  # –Ω–∞—à parser.py (–≤ —Ç–æ–º –∂–µ –∫–∞—Ç–∞–ª–æ–≥–µ)

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", 10000))
POLL_INTERVAL_SECONDS = int(os.getenv("POLL_INTERVAL_SECONDS", 60 * 5))  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

if not TOKEN:
    raise RuntimeError("BOT_TOKEN not set in .env")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –î–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ "state" (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ /addkeyword)
AWAITING_KEYWORD = {}  # user_id -> action: "add" –∏–ª–∏ "remove"

# --- –•–µ–ª–ø–µ—Ä—ã –¥–ª—è DB (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ parser.py) ---
# tender_parser.create_tables() —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message()
async def handle_message(message: types.Message):
    text = (message.text or "").strip()
    user_id = message.from_user.id

    # –ï—Å–ª–∏ —é–∑–µ—Ä –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    if user_id in AWAITING_KEYWORD:
        action = AWAITING_KEYWORD.pop(user_id)
        keyword = text.strip()
        if not keyword:
            await message.answer("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø—É—Å—Ç–æ–µ. –û—Ç–º–µ–Ω–∞.")
            return

        if action == "add":
            tender_parser.add_subscription(user_id, keyword)
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ '{keyword}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        elif action == "remove":
            tender_parser.remove_subscription(user_id, keyword)
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ '{keyword}' —É–¥–∞–ª–µ–Ω–∞ (–µ—Å–ª–∏ –±—ã–ª–∞).")
        return

    # –ü—Ä—è–º–æ–π —Ç–µ–∫—Å—Ç ‚Äî –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞
    await message.answer("–Ø –ø—Ä–∏–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—ã. –ù–∞–±–µ—Ä–∏ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")


@dp.message(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø TenderuBot ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–Ω–¥–µ—Ä—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã: /help"
    )

@dp.message(commands=["help"])
async def cmd_help(message: types.Message):
    await message.answer(
        "/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/about - –æ –±–æ—Ç–µ\n"
        "/addkeyword - –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (–Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø–æ–¥–ø–∏—à–µ—Ç–µ—Å—å)\n"
        "/removekeyword - —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "/listkeywords - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
        "/fetch - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä (—Ç–æ–ª—å–∫–æ –≤—ã)\n"
    )

@dp.message(commands=["about"])
async def cmd_about(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç?", callback_data="about_info")],
        [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="about_stats")]
    ])
    await message.answer("–û –±–æ—Ç–µ:", reply_markup=kb)

@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    data = callback.data or ""
    try:
        if data == "about_info":
            await callback.message.answer("–Ø –Ω–∞—Ö–æ–∂—É —Ç–µ–Ω–¥–µ—Ä—ã —Å goszakup –∏ —Ä–∞—Å—Å—ã–ª–∞—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.")
        elif data == "about_stats":
            # –ø—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            conn = tender_parser.get_conn()
            cur = conn.cursor()
            cur.execute("SELECT COUNT(*) FROM tenders")
            total = cur.fetchone()[0]
            cur.execute("SELECT COUNT(DISTINCT user_id) FROM subscriptions")
            users = cur.fetchone()[0] if cur.fetchone() is not None else None
            conn.close()
            await callback.message.answer(f"–¢–µ–Ω–¥–µ—Ä–æ–≤ –≤ –±–∞–∑–µ: {total}")
        else:
            await callback.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞.")
        # –≤—Å–µ–≥–¥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å callback; –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ ‚Äî –ø–æ–π–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        try:
            await callback.answer()
        except Exception as e:
            logging.warning(f"Callback answer failed (probably too old): {e}")
    except Exception as e:
        logging.exception("Error handling callback")

@dp.message(commands=["addkeyword"])
async def cmd_addkeyword(message: types.Message):
    user_id = message.from_user.id
    AWAITING_KEYWORD[user_id] = "add"
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (–æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É) ‚Äî —è –ø–æ–¥–ø–∏—à—É –≤–∞—Å –Ω–∞ –Ω–µ–≥–æ.")

@dp.message(commands=["removekeyword"])
async def cmd_removekeyword(message: types.Message):
    user_id = message.from_user.id
    AWAITING_KEYWORD[user_id] = "remove"
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫.")

@dp.message(commands=["listkeywords"])
async def cmd_listkeywords(message: types.Message):
    user_id = message.from_user.id
    rows = tender_parser.list_user_keywords(user_id)
    if not rows:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
    else:
        await message.answer("–í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n" + "\n".join(f"- {r}" for r in rows))

@dp.message(commands=["fetch"])
async def cmd_fetch(message: types.Message):
    # –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è: –ª—é–±–æ–π –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å, –Ω–æ —ç—Ç–æ —Ä—É—á–Ω–æ–π —Ç—Ä–∏–≥–≥–µ—Ä
    await message.answer("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –Ω–æ–≤—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã...")
    new = await run_parser_once_and_notify()
    await message.answer(f"–ì–æ—Ç–æ–≤–æ. –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new)} –Ω–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤.")

# --- –ü–∞—Ä—Å–µ—Ä + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ---
async def run_parser_once_and_notify():
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç –ø–∞—Ä—Å–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–∏—Ç –Ω–æ–≤—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã, —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç –∏—Ö —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö tender dicts.
    """
    # fetch & save
    loop = asyncio.get_event_loop()
    tenders = await loop.run_in_executor(None, tender_parser.fetch_tenders, 50)
    added = await loop.run_in_executor(None, tender_parser.save_new_tenders, tenders)  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π

    if not added:
        logging.info("No new tenders to process.")
        return []

    # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    subs = await loop.run_in_executor(None, tender_parser.get_subscriptions)  # dict keyword -> set(user_id)
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    # –ø—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –Ω–æ–≤—ã–º —Ç–µ–Ω–¥–µ—Ä–∞–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    notifications = {}  # user_id -> list of messages
    for t in added:
        name = (t.get("name") or "").lower()
        summary = f"üìå {t.get('name')}\n–ù–æ–º–µ—Ä: {t.get('purchase_number')}\n–ó–∞–∫–∞–∑—á–∏–∫: {t.get('customer')}\n–°—É–º–º–∞: {t.get('amount')}\n–î–∞—Ç–∞: {t.get('publish_date')}"
        for kw, users in subs.items():
            if kw and kw.lower() in name:
                for u in users:
                    notifications.setdefault(u, []).append(summary)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
    for user_id, msgs in notifications.items():
        # —Å–∫–ª–µ–∏–º –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ ‚Äî –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        try:
            for m in msgs[:10]:  # –Ω–µ —à–ª—ë–º –±–æ–ª—å—à–µ 10 —Ç–µ–Ω–¥–µ—Ä–æ–≤ –∑–∞ —Ä–∞–∑
                await bot.send_message(chat_id=user_id, text=m)
            if len(msgs) > 10:
                await bot.send_message(chat_id=user_id, text=f"...–∏ –µ—â—ë {len(msgs)-10} —Ç–µ–Ω–¥–µ—Ä–æ–≤.")
        except Exception:
            logging.exception(f"Failed to notify user {user_id}")

    logging.info(f"Notifications sent to {len(notifications)} users.")
    return added

# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π polling –ø–∞—Ä—Å–µ—Ä–∞ ---
async def polling_task():
    await asyncio.sleep(5)  # –¥–∞—ë–º —Å–µ—Ä–≤–∏—Å—É –ø–æ–¥–Ω—è—Ç—å—Å—è
    while True:
        try:
            logging.info("Periodic parser run started")
            await run_parser_once_and_notify()
            logging.info("Periodic parser run finished")
        except Exception:
            logging.exception("Error in periodic parser run")
        await asyncio.sleep(POLL_INTERVAL_SECONDS)

# --- HTTP-—Å–µ—Ä–≤–µ—Ä (–¥–ª—è Render) ---
async def handle_root(request):
    return web.Response(text="TenderuBot is running")

async def start_webserver():
    app = web.Application()
    app.add_routes([web.get("/", handle_root)])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logging.info(f"Web server started on port {PORT}")

# --- main ---
async def main():
    # ensure DB tables
    tender_parser.create_tables()

    # –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä + polling background + –±–æ—Ç
    await asyncio.gather(
        start_webserver(),
        polling_task(),
        dp.start_polling(bot, allowed_updates=types.AllowedUpdates.all())
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Shutting down...")
        try:
            asyncio.run(bot.session.close())
        except Exception:
            pass
