import logging
import asyncio
import os
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –∏–∑ .env
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # —Ç–≤–æ–π Telegram ID

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(level=logging.INFO)

def log_message(user_id, username, text):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open("logs.txt", "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] {username or 'unknown'} (id={user_id}): {text}\n")

# === –°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• ===
def init_db():
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            first_name TEXT,
            joined TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

def add_user(user_id, username, first_name):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("""
        INSERT OR IGNORE INTO users (user_id, username, first_name, joined)
        VALUES (?, ?, ?, ?)
    """, (user_id, username, first_name, datetime.now()))
    conn.commit()
    conn.close()

# === –ö–ù–û–ü–ö–ò ===
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about")],
        [InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ])
    return keyboard

# === –ö–û–ú–ê–ù–î–´ ===
@dp.message(CommandStart())
async def start_handler(message: Message):
    add_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
    log_message(message.from_user.id, message.from_user.username, "/start")
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
        f"–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ TenderuBot.\n"
        f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("help"))
async def help_handler(message: Message):
    log_message(message.from_user.id, message.from_user.username, "/help")
    await message.answer(
        "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "/about ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ\n"
        "/logs ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"
    )

@dp.message(Command("about"))
async def about_handler(message: Message):
    log_message(message.from_user.id, message.from_user.username, "/about")
    await message.answer("ü§ñ TenderuBot ‚Äî —ç—Ç–æ –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–∞–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.")

@dp.message(Command("logs"))
async def send_logs(message: Message):
    if message.from_user.id == ADMIN_ID:
        if os.path.exists("logs.txt"):
            await message.answer_document(types.FSInputFile("logs.txt"))
        else:
            await message.answer("–§–∞–π–ª –ª–æ–≥–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç üï≥Ô∏è")
    else:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º üö´")

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ===
@dp.callback_query(F.data == "about")
async def about_callback(callback: types.CallbackQuery):
    await callback.message.answer("TenderuBot —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –∫–æ–º–ø–∞–Ω–∏—è–º –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–∞–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ üìë")
    await callback.answer()

@dp.callback_query(F.data == "support")
async def support_callback(callback: types.CallbackQuery):
    await callback.message.answer("–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–æ–∂–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: support@tenderu.kz üí¨")
    await callback.answer()

@dp.callback_query(F.data == "stats")
async def stats_callback(callback: types.CallbackQuery):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM users")
    total_users = c.fetchone()[0]
    conn.close()
    await callback.message.answer(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
    await callback.answer()

# === –≠–•–û ===
@dp.message(F.text)
async def echo_handler(message: Message):
    log_message(message.from_user.id, message.from_user.username, message.text)
    await message.answer(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {message.text}")

# === –°–ï–†–í–ï–† –î–õ–Ø RENDER ===
from aiohttp import web

async def handle(request):
    return web.Response(text="Bot is running ‚úÖ")

async def start_server():
    app = web.Application()
    app.add_routes([web.get('/', handle)])
    port = int(os.getenv("PORT", 8080))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

# === –ó–ê–ü–£–°–ö ===
async def main():
    init_db()
    asyncio.create_task(start_server())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
