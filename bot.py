# bot.py
import os
import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

import tender_parser  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–≤–æ–π parser.py


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –±–µ—Ä—ë—Ç—Å—è —Å Render (–∏–∑ Dashboard ‚Üí Environment)
PORT = int(os.getenv("PORT", 10000))
POLL_INTERVAL_SECONDS = int(os.getenv("POLL_INTERVAL_SECONDS", 300))  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

if not TOKEN:
    raise RuntimeError("BOT_TOKEN not set in environment variables!")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)

bot = Bot(token=TOKEN)
dp = Dispatcher()

AWAITING_KEYWORD = {}  # user_id -> "add" –∏–ª–∏ "remove"


# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø TenderuBot ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.\n\n"
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –Ω–∞–±–µ—Ä–∏ /addkeyword\n"
        "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ ‚Äî /listkeywords\n"
        "–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ ‚Äî /parse"
    )


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "/start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/about ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        "/addkeyword ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "/removekeyword ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n"
        "/listkeywords ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫\n"
        "/parse ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–µ—Ä"
    )


@dp.message(Command("about"))
async def cmd_about(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç?", callback_data="about_info")],
        [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="about_stats")]
    ])
    await message.answer("‚ÑπÔ∏è –û –±–æ—Ç–µ:", reply_markup=kb)


@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    data = callback.data
    try:
        if data == "about_info":
            await callback.message.answer("ü§ñ –Ø –Ω–∞—Ö–æ–∂—É —Ç–µ–Ω–¥–µ—Ä—ã –ø–æ –ø–ª–æ—â–∞–¥–∫–∞–º –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –∏—Ö –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.")
        elif data == "about_stats":
            conn = tender_parser.get_conn()
            cur = conn.cursor()
            cur.execute("SELECT COUNT(*) FROM tenders")
            total = cur.fetchone()[0]
            cur.execute("SELECT COUNT(DISTINCT user_id) FROM subscriptions")
            users_row = cur.fetchone()
            users = users_row[0] if users_row else 0
            conn.close()
            await callback.message.answer(f"üìä –í –±–∞–∑–µ —Ç–µ–Ω–¥–µ—Ä–æ–≤: {total}\n–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {users}")
        await callback.answer()
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback")


@dp.message(Command("addkeyword"))
async def cmd_addkeyword(message: types.Message):
    user_id = message.from_user.id
    AWAITING_KEYWORD[user_id] = "add"
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.")


@dp.message(Command("removekeyword"))
async def cmd_removekeyword(message: types.Message):
    user_id = message.from_user.id
    AWAITING_KEYWORD[user_id] = "remove"
    await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.")


@dp.message(Command("listkeywords"))
async def cmd_listkeywords(message: types.Message):
    user_id = message.from_user.id
    rows = tender_parser.list_user_keywords(user_id)
    if not rows:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
    else:
        await message.answer("üìö –í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n" + "\n".join(f"‚Äî {r}" for r in rows))


@dp.message(Command("parse"))
async def cmd_parse(message: types.Message):
    await message.answer("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –Ω–æ–≤—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã...")

    try:
        new = await run_parser_once_and_notify()
        await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new)} –Ω–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ ---
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = (message.text or "").strip()

    if user_id in AWAITING_KEYWORD:
        action = AWAITING_KEYWORD.pop(user_id)
        keyword = text.strip()
        if not keyword:
            await message.answer("‚ùå –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø—É—Å—Ç–æ–µ, –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

        if action == "add":
            tender_parser.add_subscription(user_id, keyword)
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ '{keyword}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        elif action == "remove":
            tender_parser.remove_subscription(user_id, keyword)
            await message.answer(f"üóëÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ '{keyword}' —É–¥–∞–ª–µ–Ω–∞ (–µ—Å–ª–∏ –±—ã–ª–∞).")
        return

    await message.answer("üí° –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")


# --- –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ ---
async def run_parser_once_and_notify():
    loop = asyncio.get_event_loop()
    tenders = await loop.run_in_executor(None, tender_parser.fetch_tenders, 50)
    added = tenders  # –µ—Å–ª–∏ save_new_tenders –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ä–∞–∑—É

    if not added:
        logging.info("–ù–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤ –Ω–µ—Ç.")
        return []

    subs = tender_parser.get_subscriptions()
    notifications = {}
    for t in added:
        name = (t.get("name") or "").lower()
        summary = (
            f"üìå {t.get('name')}\n"
            f"–ù–æ–º–µ—Ä: {t.get('purchase_number')}\n"
            f"–ó–∞–∫–∞–∑—á–∏–∫: {t.get('customer')}\n"
            f"–°—É–º–º–∞: {t.get('amount')}\n"
            f"–î–∞—Ç–∞: {t.get('publish_date')}"
        )
        for kw, users in subs.items():
            if kw in name:
                for u in users:
                    notifications.setdefault(u, []).append(summary)

    for user_id, msgs in notifications.items():
        try:
            for m in msgs[:10]:
                await bot.send_message(chat_id=user_id, text=m)
            if len(msgs) > 10:
                await bot.send_message(chat_id=user_id, text=f"...–∏ –µ—â—ë {len(msgs)-10} —Ç–µ–Ω–¥–µ—Ä–æ–≤.")
        except Exception:
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π {len(notifications)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    return added


# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ---
async def polling_task():
    await asyncio.sleep(10)
    while True:
        try:
            logging.info("‚è≥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...")
            await run_parser_once_and_notify()
            logging.info("‚úÖ –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω, —Å–ø–∏–º...")
        except Exception:
            logging.exception("–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        await asyncio.sleep(POLL_INTERVAL_SECONDS)


# --- Web —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ---
async def handle_root(request):
    return web.Response(text="TenderuBot is running ‚úÖ")


async def start_webserver():
    app = web.Application()
    app.router.add_get("/", handle_root)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logging.info(f"üåê Web server started on port {PORT}")


# --- Main ---
async def main():
    tender_parser.create_tables()
    await asyncio.gather(
        start_webserver(),
        polling_task(),
        dp.start_polling(bot)
    )


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")



